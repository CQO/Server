// Generated by CoffeeScript 1.10.0
(function() {
  Meteor.methods({
    updateMessage: function(message) {
      var blockEditInMinutes, currentTsDiff, editAllowed, editOwn, hasPermission, me, msgTs, originalMessage, ref;
      if (!Meteor.userId()) {
        return false;
      }
      originalMessage = ChatMessage.findOne(message._id);
      hasPermission = RocketChat.authz.hasAtLeastOnePermission('edit-message', message.rid);
      editAllowed = RocketChat.settings.get('Message_AllowEditing');
      editOwn = (originalMessage != null ? (ref = originalMessage.u) != null ? ref._id : void 0 : void 0) === Meteor.userId();
      me = Meteor.users.findOne(Meteor.userId());
      if (!(hasPermission || (editAllowed && editOwn))) {
        toastr.error(t('error-action-not-allowed', {
          action: t('Message_editing')
        }));
        return false;
      }
      blockEditInMinutes = RocketChat.settings.get('Message_AllowEditing_BlockEditInMinutes');
      if ((blockEditInMinutes != null) && blockEditInMinutes !== 0) {
        if (originalMessage.ts != null) {
          msgTs = moment(originalMessage.ts);
        }
        if (msgTs != null) {
          currentTsDiff = moment().diff(msgTs, 'minutes');
        }
        if (currentTsDiff > blockEditInMinutes) {
          toastr.error(t('error-message-editing-blocked'));
          return false;
        }
      }
      return Tracker.nonreactive(function() {
        if (isNaN(TimeSync.serverOffset())) {
          message.editedAt = new Date();
        } else {
          message.editedAt = new Date(Date.now() + TimeSync.serverOffset());
        }
        message.editedBy = {
          _id: Meteor.userId(),
          username: me.username
        };
        message = RocketChat.callbacks.run('beforeSaveMessage', message);
        return ChatMessage.update({
          _id: message._id,
          'u._id': Meteor.userId()
        }, {
          $set: {
            "editedAt": message.editedAt,
            "editedBy": message.editedBy,
            msg: message.msg
          }
        });
      });
    }
  });

}).call(this);
