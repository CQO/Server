// Generated by CoffeeScript 1.10.0
(function() {
  Meteor.methods({
    channelsList: function(filter, channelType, limit, sort) {
      var globalPref, mergeChannels, options, ref, ref1, ref2, roomIds, roomTypes, userPref;
      check(filter, String);
      check(channelType, String);
      check(limit, Match.Optional(Number));
      check(sort, Match.Optional(String));
      if (!Meteor.userId()) {
        throw new Meteor.Error('error-invalid-user', 'Invalid user', {
          method: 'channelsList'
        });
      }
      options = {
        fields: {
          name: 1,
          t: 1
        },
        sort: {
          msgs: -1
        }
      };
      if (_.isNumber(limit)) {
        options.limit = limit;
      }
      if (_.trim(sort)) {
        switch (sort) {
          case 'name':
            options.sort = {
              name: 1
            };
            break;
          case 'msgs':
            options.sort = {
              msgs: -1
            };
        }
      }
      roomTypes = [];
      if (channelType !== 'private') {
        if (RocketChat.authz.hasPermission(Meteor.userId(), 'view-c-room')) {
          roomTypes.push({
            type: 'c'
          });
        } else if (RocketChat.authz.hasPermission(Meteor.userId(), 'view-joined-room')) {
          roomIds = _.pluck(RocketChat.models.Subscriptions.findByTypeAndUserId('c', Meteor.userId()).fetch(), 'rid');
          roomTypes.push({
            type: 'c',
            ids: roomIds
          });
        }
      }
      if (channelType !== 'public' && RocketChat.authz.hasPermission(Meteor.userId(), 'view-p-room')) {
        userPref = (ref = Meteor.user()) != null ? (ref1 = ref.settings) != null ? (ref2 = ref1.preferences) != null ? ref2.mergeChannels : void 0 : void 0 : void 0;
        globalPref = RocketChat.settings.get('UI_Merge_Channels_Groups');
        mergeChannels = userPref != null ? userPref : globalPref;
        if (mergeChannels) {
          roomTypes.push({
            type: 'p',
            username: Meteor.user().username
          });
        }
      }
      if (roomTypes.length) {
        if (filter) {
          return {
            channels: RocketChat.models.Rooms.findByNameContainingTypesWithUsername(filter, roomTypes, options).fetch()
          };
        } else {
          return {
            channels: RocketChat.models.Rooms.findContainingTypesWithUsername(roomTypes, options).fetch()
          };
        }
      } else {
        return {
          channels: []
        };
      }
    }
  });

}).call(this);
