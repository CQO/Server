// Generated by CoffeeScript 1.10.0
(function() {
  Meteor.methods({
    loadHistory: function(rid, end, limit, ls) {
      var firstMessage, firstUnread, fromId, messages, options, records, room, unreadMessages, unreadNotLoaded;
      if (limit == null) {
        limit = 20;
      }
      check(rid, String);
      if (!Meteor.userId()) {
        throw new Meteor.Error('error-invalid-user', 'Invalid user', {
          method: 'loadHistory'
        });
      }
      fromId = Meteor.userId();
      room = Meteor.call('canAccessRoom', rid, fromId);
      if (!room) {
        return false;
      }
      if (room.t === 'c' && !RocketChat.authz.hasPermission(fromId, 'preview-c-room') && room.usernames.indexOf(room.username) === -1) {
        return false;
      }
      options = {
        sort: {
          ts: -1
        },
        limit: limit
      };
      if (!RocketChat.settings.get('Message_ShowEditedStatus')) {
        options.fields = {
          'editedAt': 0
        };
      }
      if (end != null) {
        records = RocketChat.models.Messages.findVisibleByRoomIdBeforeTimestamp(rid, end, options).fetch();
      } else {
        records = RocketChat.models.Messages.findVisibleByRoomId(rid, options).fetch();
      }
      messages = _.map(records, function(message) {
        message.starred = _.findWhere(message.starred, {
          _id: fromId
        });
        return message;
      });
      unreadNotLoaded = 0;
      if (ls != null) {
        firstMessage = messages[messages.length - 1];
        if ((firstMessage != null ? firstMessage.ts : void 0) > ls) {
          delete options.limit;
          unreadMessages = RocketChat.models.Messages.findVisibleByRoomIdBetweenTimestamps(rid, ls, firstMessage.ts, {
            limit: 1,
            sort: {
              ts: 1
            }
          });
          firstUnread = unreadMessages.fetch()[0];
          unreadNotLoaded = unreadMessages.count();
        }
      }
      return {
        messages: messages,
        firstUnread: firstUnread,
        unreadNotLoaded: unreadNotLoaded
      };
    }
  });

}).call(this);
