// Generated by CoffeeScript 1.10.0
(function() {
  Meteor.methods({
    loadSurroundingMessages: function(message, limit) {
      var afterMessages, fromId, messages, moreAfter, moreBefore, options, records;
      if (limit == null) {
        limit = 50;
      }
      check(message, Object);
      check(limit, Number);
      if (!Meteor.userId()) {
        throw new Meteor.Error('error-invalid-user', 'Invalid user', {
          method: 'loadSurroundingMessages'
        });
      }
      fromId = Meteor.userId();
      if (!message._id) {
        return false;
      }
      message = RocketChat.models.Messages.findOneById(message._id);
      if (!(message != null ? message.rid : void 0)) {
        return false;
      }
      if (!Meteor.call('canAccessRoom', message.rid, fromId)) {
        return false;
      }
      limit = limit - 1;
      options = {
        sort: {
          ts: -1
        },
        limit: Math.ceil(limit / 2)
      };
      if (!RocketChat.settings.get('Message_ShowEditedStatus')) {
        options.fields = {
          'editedAt': 0
        };
      }
      records = RocketChat.models.Messages.findVisibleByRoomIdBeforeTimestamp(message.rid, message.ts, options).fetch();
      messages = _.map(records, function(message) {
        message.starred = _.findWhere(message.starred, {
          _id: fromId
        });
        return message;
      });
      moreBefore = messages.length === options.limit;
      messages.push(message);
      options.sort = {
        ts: 1
      };
      options.limit = Math.floor(limit / 2);
      records = RocketChat.models.Messages.findVisibleByRoomIdAfterTimestamp(message.rid, message.ts, options).fetch();
      afterMessages = _.map(records, function(message) {
        message.starred = _.findWhere(message.starred, {
          _id: fromId
        });
        return message;
      });
      moreAfter = afterMessages.length === options.limit;
      messages = messages.concat(afterMessages);
      return {
        messages: messages,
        moreBefore: moreBefore,
        moreAfter: moreAfter
      };
    }
  });

}).call(this);
