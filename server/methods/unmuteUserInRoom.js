// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Meteor.methods({
    unmuteUserInRoom: function(data) {
      var fromId, fromUser, ref, ref1, room, unmutedUser;
      fromId = Meteor.userId();
      check(data, Match.ObjectIncluding({
        rid: String,
        username: String
      }));
      if (!RocketChat.authz.hasPermission(fromId, 'mute-user', data.rid)) {
        throw new Meteor.Error('error-not-allowed', 'Not allowed', {
          method: 'unmuteUserInRoom'
        });
      }
      room = RocketChat.models.Rooms.findOneById(data.rid);
      if (!room) {
        throw new Meteor.Error('error-invalid-room', 'Invalid room', {
          method: 'unmuteUserInRoom'
        });
      }
      if ((ref = room.t) !== 'c' && ref !== 'p') {
        throw new Meteor.Error('error-invalid-room-type', room.t + ' is not a valid room type', {
          method: 'unmuteUserInRoom',
          type: room.t
        });
      }
      if (ref1 = data.username, indexOf.call((room != null ? room.usernames : void 0) || [], ref1) < 0) {
        throw new Meteor.Error('error-user-not-in-room', 'User is not in this room', {
          method: 'unmuteUserInRoom'
        });
      }
      unmutedUser = RocketChat.models.Users.findOneByUsername(data.username);
      RocketChat.models.Rooms.unmuteUsernameByRoomId(data.rid, unmutedUser.username);
      fromUser = RocketChat.models.Users.findOneById(fromId);
      RocketChat.models.Messages.createUserUnmutedWithRoomIdAndUser(data.rid, unmutedUser, {
        u: {
          _id: fromUser._id,
          username: fromUser.username
        }
      });
      return true;
    }
  });

}).call(this);
