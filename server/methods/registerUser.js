// Generated by CoffeeScript 1.10.0
(function() {
  Meteor.methods({
    registerUser: function(formData) {
      var customFields, customFieldsMeta, e, error, field, fieldName, modifyRecordField, update, userData, userId, value;
      check(formData, Object);
      if (RocketChat.settings.get('Accounts_RegistrationForm') === 'Disabled') {
        throw new Meteor.Error('error-user-registration-disabled', 'User registration is disabled', {
          method: 'registerUser'
        });
      } else if (RocketChat.settings.get('Accounts_RegistrationForm') === 'Secret URL' && (!formData.secretURL || formData.secretURL !== RocketChat.settings.get('Accounts_RegistrationForm_SecretURL'))) {
        throw new Meteor.Error('error-user-registration-secret', 'User registration is only allowed via Secret URL', {
          method: 'registerUser'
        });
      }
      RocketChat.validateEmailDomain(formData.email);
      userData = {
        email: s.trim(formData.email.toLowerCase()),
        password: formData.pass
      };
      userId = Accounts.createUser(userData);
      RocketChat.models.Users.setName(userId, s.trim(formData.name));
      if (RocketChat.settings.get('Accounts_CustomFields') !== '') {
        try {
          customFieldsMeta = JSON.parse(RocketChat.settings.get('Accounts_CustomFields'));
          customFields = {};
          for (fieldName in customFieldsMeta) {
            field = customFieldsMeta[fieldName];
            customFields[fieldName] = formData[fieldName];
            if (field.required === true && !formData[fieldName]) {
              throw new Meteor.Error('error-user-registration-custom-field', "Field " + fieldName + " is required", {
                method: 'registerUser'
              });
            }
            if (field.type === 'select' && field.options.indexOf(formData[fieldName]) === -1) {
              throw new Meteor.Error('error-user-registration-custom-field', "Value for field " + fieldName + " is invalid", {
                method: 'registerUser'
              });
            }
            if ((field.maxLength != null) && formData[fieldName].length > field.maxLength) {
              throw new Meteor.Error('error-user-registration-custom-field', "Max length of field " + fieldName + " " + field.maxLength, {
                method: 'registerUser'
              });
            }
            if ((field.minLength != null) && formData[fieldName].length < field.minLength) {
              throw new Meteor.Error('error-user-registration-custom-field', "Min length of field " + fieldName + " " + field.minLength, {
                method: 'registerUser'
              });
            }
          }
          RocketChat.models.Users.setCustomFields(userId, customFields);
          for (fieldName in customFields) {
            value = customFields[fieldName];
            if (!(customFieldsMeta[fieldName].modifyRecordField != null)) {
              continue;
            }
            modifyRecordField = customFieldsMeta[fieldName].modifyRecordField;
            update = {};
            if (modifyRecordField.array === true) {
              update.$addToSet = {};
              update.$addToSet[modifyRecordField.field] = value;
            } else {
              update.$set = {};
              update.$set[modifyRecordField.field] = value;
            }
            RocketChat.models.Users.update(userId, update);
          }
        } catch (error) {
          e = error;
          console.error('Invalid JSON for Accounts_CustomFields');
        }
      }
      if (userData.email) {
        Accounts.sendVerificationEmail(userId, userData.email);
      }
      return userId;
    }
  });

}).call(this);
