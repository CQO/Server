// Generated by CoffeeScript 1.10.0
(function() {
  var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Meteor.methods({
    removeUserFromRoom: function(data) {
      var fromId, fromUser, numOwners, ref, ref1, removedUser, room;
      check(data, Match.ObjectIncluding({
        rid: String,
        username: String
      }));
      if (!Meteor.userId()) {
        throw new Meteor.Error('error-invalid-user', 'Invalid user', {
          method: 'removeUserFromRoom'
        });
      }
      fromId = Meteor.userId();
      if (!RocketChat.authz.hasPermission(fromId, 'remove-user', data.rid)) {
        throw new Meteor.Error('error-not-allowed', 'Not allowed', {
          method: 'removeUserFromRoom'
        });
      }
      room = RocketChat.models.Rooms.findOneById(data.rid);
      if (ref = data.username, indexOf.call((room != null ? room.usernames : void 0) || [], ref) < 0) {
        throw new Meteor.Error('error-user-not-in-room', 'User is not in this room', {
          method: 'removeUserFromRoom'
        });
      }
      if (RocketChat.authz.hasRole(Meteor.user()._id, 'owner', room._id)) {
        numOwners = RocketChat.authz.getUsersInRole('owner', room._id).fetch().length;
        if (numOwners === 1) {
          throw new Meteor.Error('error-you-are-last-owner', 'You are the last owner. Please set new owner before leaving the room.', {
            method: 'removeUserFromRoom'
          });
        }
      }
      removedUser = RocketChat.models.Users.findOneByUsername(data.username);
      RocketChat.models.Rooms.removeUsernameById(data.rid, data.username);
      RocketChat.models.Subscriptions.removeByRoomIdAndUserId(data.rid, removedUser._id);
      if ((ref1 = room.t) === 'c' || ref1 === 'p') {
        RocketChat.authz.removeUserFromRoles(removedUser._id, ['moderator', 'owner'], data.rid);
      }
      fromUser = RocketChat.models.Users.findOneById(fromId);
      RocketChat.models.Messages.createUserRemovedWithRoomIdAndUser(data.rid, removedUser, {
        u: {
          _id: fromUser._id,
          username: fromUser.username
        }
      });
      return true;
    }
  });

}).call(this);
