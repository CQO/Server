// Generated by CoffeeScript 1.10.0
(function() {
  var orig_updateOrCreateUserFromExternalService;

  orig_updateOrCreateUserFromExternalService = Accounts.updateOrCreateUserFromExternalService;

  Accounts.updateOrCreateUserFromExternalService = function(serviceName, serviceData, options) {
    var email, i, len, ref, user;
    if ((serviceName !== 'facebook' && serviceName !== 'github' && serviceName !== 'gitlab' && serviceName !== 'google' && serviceName !== 'meteor-developer' && serviceName !== 'linkedin' && serviceName !== 'twitter' && serviceName !== 'sandstorm') && serviceData._OAuthCustom !== true) {
      return;
    }
    if (serviceName === 'meteor-developer') {
      if (_.isArray(serviceData != null ? serviceData.emails : void 0)) {
        serviceData.emails.sort(function(a, b) {
          return a.primary !== true;
        });
        ref = serviceData.emails;
        for (i = 0, len = ref.length; i < len; i++) {
          email = ref[i];
          if (email.verified === true) {
            serviceData.email = email.address;
            break;
          }
        }
      }
    }
    if (serviceName === 'linkedin') {
      serviceData.email = serviceData.emailAddress;
    }
    if (serviceData.email) {
      user = RocketChat.models.Users.findOneByEmailAddress(serviceData.email);
      if (user != null) {
        if (!_.findWhere(user.emails, {
          address: serviceData.email,
          verified: true
        })) {
          RocketChat.models.Users.resetPasswordAndSetRequirePasswordChange(user._id, true, 'This_email_has_already_been_used_and_has_not_been_verified__Please_change_your_password');
        }
        RocketChat.models.Users.setServiceId(user._id, serviceName, serviceData.id);
        RocketChat.models.Users.setEmailVerified(user._id, serviceData.email);
      }
    }
    return orig_updateOrCreateUserFromExternalService.apply(this, arguments);
  };

}).call(this);
