// Generated by CoffeeScript 1.10.0
(function() {
  var slice = [].slice;

  this.msgStream = new Meteor.Streamer('room-messages');

  msgStream.allowWrite('none');

  msgStream.allowRead(function(eventName) {
    var e, error, room;
    try {
      room = Meteor.call('canAccessRoom', eventName, this.userId);
      if (!room) {
        return false;
      }
      if (room.t === 'c' && !RocketChat.authz.hasPermission(this.userId, 'preview-c-room') && room.usernames.indexOf(room.username) === -1) {
        return false;
      }
      return true;
    } catch (error) {
      e = error;
      return false;
    }
  });

  msgStream.allowRead('__my_messages__', 'all');

  msgStream.allowEmit('__my_messages__', function(eventName, msg, options) {
    var e, error, room;
    try {
      room = Meteor.call('canAccessRoom', msg.rid, this.userId);
      if (!room) {
        return false;
      }
      options.roomParticipant = room.usernames.indexOf(room.username) > -1;
      options.roomType = room.t;
      return true;
    } catch (error) {
      e = error;
      return false;
    }
  });

  Meteor.startup(function() {
    var fields;
    fields = void 0;
    if (!RocketChat.settings.get('Message_ShowEditedStatus')) {
      fields = {
        'editedAt': 0
      };
    }
    return RocketChat.models.Messages.on('change', function() {
      var args, i, len, record, records, results, type;
      type = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      records = RocketChat.models.Messages.getChangedRecords(type, args[0], fields);
      results = [];
      for (i = 0, len = records.length; i < len; i++) {
        record = records[i];
        if (record._hidden !== true && (record.imported == null)) {
          msgStream.emit('__my_messages__', record, {});
          results.push(msgStream.emit(record.rid, record));
        } else {
          results.push(void 0);
        }
      }
      return results;
    });
  });

}).call(this);
