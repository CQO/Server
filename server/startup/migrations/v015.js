// Generated by CoffeeScript 1.10.0
(function() {
  RocketChat.Migrations.add({
    version: 15,
    up: function() {
      var newChunkCollection, newFilesCollection, newGridFSCollection, oldChunkCollection, oldFilesCollection, oldGridFSCollection;
      console.log('Starting file migration');
      oldFilesCollection = new Meteor.Collection('cfs.Files.filerecord');
      oldGridFSCollection = new Meteor.Collection('cfs_gridfs.files.files');
      oldChunkCollection = new Meteor.Collection('cfs_gridfs.files.chunks');
      newFilesCollection = RocketChat.models.Uploads;
      newGridFSCollection = new Meteor.Collection('rocketchat_uploads.files');
      newChunkCollection = new Meteor.Collection('rocketchat_uploads.chunks');
      oldFilesCollection.find({
        'copies.files.key': {
          $exists: true
        }
      }).forEach(function(cfsRecord) {
        var extension, nameParts, oldGridFsFile, record, ref, url;
        nameParts = (ref = cfsRecord.original.name) != null ? ref.split('.') : void 0;
        extension = '';
        url = "ufs/rocketchat_uploads/" + cfsRecord._id;
        console.log('migrating file', url);
        if ((nameParts != null ? nameParts.length : void 0) > 1) {
          extension = nameParts.pop();
          url = url + '.' + extension;
        }
        record = {
          _id: cfsRecord._id,
          name: cfsRecord.original.name || '',
          size: cfsRecord.original.size,
          type: cfsRecord.original.type,
          complete: true,
          uploading: false,
          store: "rocketchat_uploads",
          extension: extension,
          userId: cfsRecord.userId,
          uploadedAt: cfsRecord.updatedAt,
          url: Meteor.absoluteUrl() + url
        };
        newFilesCollection.insert(record);
        oldGridFsFile = oldGridFSCollection.findOne({
          _id: new Meteor.Collection.ObjectID(cfsRecord.copies.files.key)
        });
        newGridFSCollection.insert({
          _id: cfsRecord._id,
          filename: cfsRecord._id,
          contentType: oldGridFsFile.contentType,
          length: oldGridFsFile.length,
          chunkSize: oldGridFsFile.chunkSize,
          uploadDate: oldGridFsFile.uploadDate,
          aliases: null,
          metadata: null,
          md5: oldGridFsFile.md5
        });
        oldChunkCollection.find({
          files_id: new Meteor.Collection.ObjectID(cfsRecord.copies.files.key)
        }).forEach(function(oldChunk) {
          return newChunkCollection.insert({
            _id: oldChunk._id,
            files_id: cfsRecord._id,
            n: oldChunk.n,
            data: oldChunk.data
          });
        });
        RocketChat.models.Messages.find({
          $or: [
            {
              'urls.url': "https://demo.rocket.chat/cfs/files/Files/" + cfsRecord._id
            }, {
              'urls.url': "https://rocket.chat/cfs/files/Files/" + cfsRecord._id
            }
          ]
        }).forEach(function(message) {
          var i, len, ref1, ref2, urlsItem;
          ref1 = message.urls;
          for (i = 0, len = ref1.length; i < len; i++) {
            urlsItem = ref1[i];
            if (urlsItem.url === ("https://demo.rocket.chat/cfs/files/Files/" + cfsRecord._id) || urlsItem.url === ("https://rocket.chat/cfs/files/Files/" + cfsRecord._id)) {
              urlsItem.url = Meteor.absoluteUrl() + url;
              if (((ref2 = urlsItem.parsedUrl) != null ? ref2.pathname : void 0) != null) {
                urlsItem.parsedUrl.pathname = "/" + url;
              }
              message.msg = message.msg.replace("https://demo.rocket.chat/cfs/files/Files/" + cfsRecord._id, Meteor.absoluteUrl() + url);
              message.msg = message.msg.replace("https://rocket.chat/cfs/files/Files/" + cfsRecord._id, Meteor.absoluteUrl() + url);
            }
          }
          return RocketChat.models.Messages.update({
            _id: message._id
          }, {
            $set: {
              urls: message.urls,
              msg: message.msg
            }
          });
        });
        oldFilesCollection.remove({
          _id: cfsRecord._id
        });
        oldGridFSCollection.remove({
          _id: oldGridFsFile._id
        });
        return oldChunkCollection.remove({
          files_id: new Meteor.Collection.ObjectID(cfsRecord.copies.files.key)
        });
      });
      return console.log('End of file migration');
    }
  });

}).call(this);
