// Generated by CoffeeScript 1.10.0
(function() {
  var fields,
    slice = [].slice;

  fields = {
    t: 1,
    ts: 1,
    ls: 1,
    name: 1,
    rid: 1,
    code: 1,
    f: 1,
    u: 1,
    open: 1,
    alert: 1,
    roles: 1,
    unread: 1,
    archived: 1,
    desktopNotifications: 1,
    desktopNotificationDuration: 1,
    mobilePushNotifications: 1,
    emailNotifications: 1,
    unreadAlert: 1,
    _updatedAt: 1
  };

  Meteor.methods({
    'subscriptions/get': function() {
      var options;
      if (!Meteor.userId()) {
        return [];
      }
      this.unblock();
      options = {
        fields: fields
      };
      return RocketChat.models.Subscriptions.findByUserId(Meteor.userId(), options).fetch();
    },
    'subscriptions/sync': function(updatedAt) {
      var options;
      if (!Meteor.userId()) {
        return {};
      }
      this.unblock();
      options = {
        fields: fields
      };
      return RocketChat.models.Subscriptions.dinamicFindChangesAfter('findByUserId', updatedAt, Meteor.userId(), options);
    }
  });

  RocketChat.models.Subscriptions.on('change', function() {
    var args, i, len, record, records, results, type;
    type = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    records = RocketChat.models.Subscriptions.getChangedRecords(type, args[0], fields);
    results = [];
    for (i = 0, len = records.length; i < len; i++) {
      record = records[i];
      results.push(RocketChat.Notifications.notifyUser(record.u._id, 'subscriptions-changed', type, record));
    }
    return results;
  });

}).call(this);
