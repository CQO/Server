// Generated by CoffeeScript 1.10.0
(function() {
  var accountsConfig, resetPasswordHtml, verifyEmailHtml,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  accountsConfig = {
    forbidClientAccountCreation: true,
    loginExpirationInDays: RocketChat.settings.get('Accounts_LoginExpiration')
  };

  Accounts.config(accountsConfig);

  Accounts.emailTemplates.siteName = RocketChat.settings.get('Site_Name');

  Accounts.emailTemplates.from = (RocketChat.settings.get('Site_Name')) + " <" + (RocketChat.settings.get('From_Email')) + ">";

  verifyEmailHtml = Accounts.emailTemplates.verifyEmail.text;

  Accounts.emailTemplates.verifyEmail.html = function(user, url) {
    url = url.replace(Meteor.absoluteUrl(), Meteor.absoluteUrl() + 'login/');
    return verifyEmailHtml(user, url);
  };

  resetPasswordHtml = Accounts.emailTemplates.resetPassword.text;

  Accounts.emailTemplates.resetPassword.html = function(user, url) {
    url = url.replace(/\/#\//, '/');
    return resetPasswordHtml(user, url);
  };

  Accounts.emailTemplates.enrollAccount.subject = function(user) {
    var subject;
    if (RocketChat.settings.get('Accounts_Enrollment_Customized')) {
      subject = RocketChat.settings.get('Accounts_Enrollment_Email_Subject');
    } else {
      subject = TAPi18n.__('Accounts_Enrollment_Email_Subject_Default', {
        lng: (user != null ? user.language : void 0) || RocketChat.settings.get('language') || 'en'
      });
    }
    return RocketChat.placeholders.replace(subject);
  };

  Accounts.emailTemplates.enrollAccount.html = function(user, url) {
    var footer, header, html, ref, ref1;
    if (RocketChat.settings.get('Accounts_Enrollment_Customized')) {
      html = RocketChat.settings.get('Accounts_Enrollment_Email');
    } else {
      html = TAPi18n.__('Accounts_Enrollment_Email_Default', {
        lng: (user != null ? user.language : void 0) || RocketChat.settings.get('language') || 'en'
      });
    }
    header = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Header') || "");
    footer = RocketChat.placeholders.replace(RocketChat.settings.get('Email_Footer') || "");
    html = RocketChat.placeholders.replace(html, {
      name: user.name,
      email: (ref = user.emails) != null ? (ref1 = ref[0]) != null ? ref1.address : void 0 : void 0
    });
    return header + html + footer;
  };

  Accounts.onCreateUser(function(options, user) {
    var ref, ref1, ref2, service, serviceName;
    RocketChat.callbacks.run('beforeCreateUser', options, user);
    user.status = 'offline';
    user.active = !RocketChat.settings.get('Accounts_ManuallyApproveNewUsers');
    if (((user != null ? user.name : void 0) == null) || user.name === '') {
      if (((ref = options.profile) != null ? ref.name : void 0) != null) {
        user.name = (ref1 = options.profile) != null ? ref1.name : void 0;
      }
    }
    if (user.services != null) {
      ref2 = user.services;
      for (serviceName in ref2) {
        service = ref2[serviceName];
        if (((user != null ? user.name : void 0) == null) || user.name === '') {
          if (service.name != null) {
            user.name = service.name;
          } else if (service.username != null) {
            user.name = service.username;
          }
        }
        if ((user.emails == null) && (service.email != null)) {
          user.emails = [
            {
              address: service.email,
              verified: true
            }
          ];
        }
      }
    }
    return user;
  });

  Accounts.insertUserDoc = _.wrap(Accounts.insertUserDoc, function(insertUserDoc, options, user) {
    var _id, hasAdmin, roles;
    roles = [];
    if (Match.test(user.globalRoles, [String]) && user.globalRoles.length > 0) {
      roles = roles.concat(user.globalRoles);
    }
    delete user.globalRoles;
    if (user.type == null) {
      user.type = 'user';
    }
    _id = insertUserDoc.call(Accounts, options, user);
    if (roles.length === 0) {
      hasAdmin = RocketChat.models.Users.findOne({
        roles: 'admin'
      }, {
        fields: {
          _id: 1
        }
      });
      if (hasAdmin != null) {
        roles.push('user');
      } else {
        roles.push('admin');
      }
    }
    RocketChat.authz.addUserRoles(_id, roles);
    Meteor.defer(function() {
      return RocketChat.callbacks.run('afterCreateUser', options, user);
    });
    return _id;
  });

  Accounts.validateLoginAttempt(function(login) {
    var ref, ref1, validEmail;
    login = RocketChat.callbacks.run('beforeValidateLogin', login);
    if (login.allowed !== true) {
      return login.allowed;
    }
    if (login.user.type === 'visitor') {
      return true;
    }
    if (!!((ref = login.user) != null ? ref.active : void 0) !== true) {
      throw new Meteor.Error('error-user-is-not-activated', 'User is not activated', {
        "function": 'Accounts.validateLoginAttempt'
      });
      return false;
    }
    if (indexOf.call((ref1 = login.user) != null ? ref1.roles : void 0, 'admin') < 0 && login.type === 'password' && RocketChat.settings.get('Accounts_EmailVerification') === true) {
      validEmail = login.user.emails.filter(function(email) {
        return email.verified === true;
      });
      if (validEmail.length === 0) {
        throw new Meteor.Error('error-invalid-email', 'Invalid email __email__');
        return false;
      }
    }
    RocketChat.models.Users.updateLastLoginById(login.user._id);
    Meteor.defer(function() {
      return RocketChat.callbacks.run('afterValidateLogin', login);
    });
    return true;
  });

  Accounts.validateNewUser(function(user) {
    var ref;
    if (user.type === 'visitor') {
      return true;
    }
    if (RocketChat.settings.get('Accounts_Registration_AuthenticationServices_Enabled') === false && RocketChat.settings.get('LDAP_Enable') === false && (((ref = user.services) != null ? ref.password : void 0) == null)) {
      throw new Meteor.Error('registration-disabled-authentication-services', 'User registration is disabled for authentication services');
    }
    return true;
  });

  Accounts.validateNewUser(function(user) {
    var domain, domainWhiteList, email, i, len, ref, ret;
    if (user.type === 'visitor') {
      return true;
    }
    domainWhiteList = RocketChat.settings.get('Accounts_AllowedDomainsList');
    if (_.isEmpty(s.trim(domainWhiteList))) {
      return true;
    }
    domainWhiteList = _.map(domainWhiteList.split(','), function(domain) {
      return domain.trim();
    });
    if (((ref = user.emails) != null ? ref.length : void 0) > 0) {
      ret = false;
      email = user.emails[0].address;
      for (i = 0, len = domainWhiteList.length; i < len; i++) {
        domain = domainWhiteList[i];
        if (email.match('@' + RegExp.escape(domain) + '$')) {
          ret = true;
          break;
        }
      }
      return ret;
    }
    return true;
  });

}).call(this);
